{
  "version": 3,
  "sources": ["../src/index.js", "../src/create.js", "../src/utils/style.js", "../src/utils/log.js", "../src/compile.js", "../src/utils/reimport.js", "../src/utils/getFilePaths.js", "../src/utils/fileToRoutePattern.js", "../src/utils/errors.js", "../src/utils/registryPlugin.js"],
  "sourcesContent": ["import { Command } from 'commander'\n\nimport { create } from './create'\nimport { compile } from './compile'\n\nconst program = new Command()\n\nprogram.name('firebolt').description('A description').version('1.0.0')\n\nprogram\n  .command('create')\n  .argument('<name>', 'the project name')\n  .action(name => {\n    create(name)\n  })\nprogram.command('dev').action(() => {\n  compile({ build: true, watch: true, serve: true })\n})\nprogram.command('build').action(() => {\n  compile({ build: true, production: true })\n})\nprogram.command('start').action(() => {\n  compile({ serve: true })\n})\n\nprogram.parse()\n", "import fs from 'fs-extra'\nimport path from 'path'\nimport { execSync } from 'child_process'\n\nimport * as log from './utils/log'\nimport * as style from './utils/style'\n\nexport async function create(projectName) {\n  const cwd = process.cwd()\n  const projectDir = path.join(cwd, projectName)\n  const templateDir = path.join(__dirname, '../project')\n\n  log.intro()\n\n  const projectDirExists = await fs.exists(projectDir)\n  if (projectDirExists) {\n    return log.error(`a directory with the name ${style.mark(projectName)} already exists.\\n`) // prettier-ignore\n  }\n\n  log.info(`creating directory ${style.mark(`./${projectName}`)}`)\n\n  await fs.ensureDir(projectDir)\n\n  log.info(`initializing project`)\n\n  await fs.copy(templateDir, projectDir)\n\n  log.info(`personalizing project`)\n\n  await replace(\n    path.join(projectDir, 'package.json'),\n    '__projectName__',\n    projectName\n  )\n\n  await replace(\n    path.join(projectDir, 'document.js'),\n    '__projectName__',\n    projectName\n  )\n\n  await replace(\n    path.join(projectDir, 'pages/index.js'),\n    '__projectName__',\n    projectName\n  )\n\n  log.info(`initializing git repository`)\n\n  execSync(`git init`, { cwd: projectDir, stdio: 'ignore' })\n\n  log.info(`installing dependencies...`)\n\n  execSync('npm install', { cwd: projectDir, stdio: 'ignore' })\n\n  console.log('\\nYour project is ready!\\n')\n}\n\nasync function replace(file, target, value) {\n  let content = await fs.readFile(file, 'utf8')\n  content = content.replace(new RegExp(target, 'g'), value)\n  await fs.writeFile(file, content)\n}\n", "import chalk from 'chalk'\n\nexport const dim = chalk.dim\nexport const mark = chalk.hex('#1ac4ff')\n\nexport const info = chalk.bold.black.bgWhiteBright\nexport const change = chalk.bold.black.bgWhiteBright\nexport const error = chalk.bold.whiteBright.bgHex('#e74b4b')\n", "import * as style from './style'\n\nexport function intro() {\n  console.log('\\n  \uD83D\uDD25 Firebolt\\n')\n}\n\nexport function info(...args) {\n  console.log(style.info(' INF '), ...args)\n}\n\nexport function change(...args) {\n  console.log(style.change(' CHN '), ...args)\n}\n\nexport function error(...args) {\n  console.log(style.error(' ERR '), ...args)\n}\n", "import fs from 'fs-extra'\nimport path from 'path'\nimport { fork } from 'child_process'\nimport { performance } from 'perf_hooks'\nimport chokidar from 'chokidar'\nimport * as esbuild from 'esbuild'\nimport { debounce, defaultsDeep } from 'lodash'\nimport { polyfillNode } from 'esbuild-plugin-polyfill-node'\n\nimport * as s from './utils/style'\nimport * as log from './utils/log'\nimport { reimport } from './utils/reimport'\nimport { getFilePaths } from './utils/getFilePaths'\nimport { fileToRoutePattern } from './utils/fileToRoutePattern'\nimport {\n  BundlerError,\n  isEsbuildError,\n  logCodeError,\n  parseEsbuildError,\n  parseServerError,\n} from './utils/errors'\nimport { virtualModule } from './utils/virtualModule'\nimport { registryPlugin } from './utils/registryPlugin'\n\nexport async function compile(opts) {\n  const prod = !!opts.production\n  const env = prod ? 'production' : 'development'\n\n  const dir = __dirname\n  const appDir = process.cwd()\n  const appPagesDir = path.join(appDir, 'pages')\n  const appApiDir = path.join(appDir, 'api')\n  const appConfigFile = path.join(appDir, 'firebolt.config.js')\n\n  const buildDir = path.join(appDir, '.firebolt')\n  const buildPageShimsDir = path.join(appDir, '.firebolt/page-shims')\n  const buildCoreFile = path.join(appDir, '.firebolt/core.js')\n  const buildConfigFile = path.join(appDir, '.firebolt/config.js')\n  const buildManifestFile = path.join(appDir, '.firebolt/manifest.json')\n  const buildLibFile = path.join(appDir, '.firebolt/lib.js')\n  const buildBoostrapFile = path.join(appDir, '.firebolt/bootstrap.js')\n  const buildRegistryFile = path.join(appDir, '.firebolt/registry.js')\n  const buildServerFile = path.join(appDir, '.firebolt/server.js')\n\n  const extrasDir = path.join(dir, '../extras')\n\n  const serverServerFile = path.join(appDir, '.firebolt/server/index.js')\n\n  const tmpConfigFile = path.join(appDir, '.firebolt/tmp/config.js')\n  const tmpCoreFile = path.join(appDir, '.firebolt/tmp/core.js')\n\n  let firstBuild = true\n  let config\n\n  log.intro()\n\n  async function build() {\n    // start tracking build time\n    const startAt = performance.now()\n    log.info(`${firstBuild ? 'building...' : 'rebuilding...'}`)\n\n    // ensure empty build directory\n    await fs.emptyDir(buildDir)\n\n    // check for config\n    if (!(await fs.exists(appConfigFile))) {\n      throw new BundlerError(`missing ${$mark('firebolt.config.js')} file`)\n    }\n\n    // create config entry\n    const configCode = `\n      export { default as getConfig } from '../firebolt.config.js'\n    `\n    await fs.writeFile(buildConfigFile, configCode)\n\n    // temporarily build, import and validate config\n    await esbuild.build({\n      entryPoints: [buildConfigFile],\n      outfile: tmpConfigFile,\n      bundle: true,\n      treeShaking: true,\n      sourcemap: true,\n      minify: false,\n      platform: 'node',\n      packages: 'external',\n      logLevel: 'silent',\n      define: {\n        'process.env.NODE_ENV': JSON.stringify(env),\n        FIREBOLT_NODE_ENV: JSON.stringify(env),\n      },\n      loader: {\n        '.js': 'jsx',\n      },\n      jsx: 'automatic',\n      jsxImportSource: '@emotion/react',\n      plugins: [],\n    })\n    const { getConfig } = await reimport(tmpConfigFile)\n    config = getConfig()\n    defaultsDeep(config, {\n      port: 3000,\n      external: [],\n      productionBrowserSourceMaps: false,\n    })\n\n    // initialize manifest\n    const manifest = {\n      pageFiles: {},\n      bootstrapFile: null,\n    }\n\n    // get a list of page files\n    const pageFiles = await getFilePaths(appPagesDir)\n\n    // generate route details\n    let ids = 0\n    const routes = []\n    for (const pageFile of pageFiles) {\n      const id = `route${++ids}`\n      const prettyFileBase = path.relative(appDir, pageFile)\n      const pageFileBase = path.relative(appPagesDir, pageFile)\n      const shimFile = path.join(buildPageShimsDir, pageFileBase.replace('/', '.')) // prettier-ignore\n      const shimFileName = path.relative(path.dirname(shimFile), shimFile) // prettier-ignore\n      const pattern = fileToRoutePattern('/' + pageFileBase)\n      const relBuildToPageFile = path.relative(buildDir, pageFile)\n      const relShimToPageFile = path.relative(path.dirname(shimFile), pageFile) // prettier-ignore\n      routes.push({\n        id,\n        prettyFileBase,\n        pattern,\n        shimFile,\n        shimFileName,\n        relBuildToPageFile,\n        relShimToPageFile,\n      })\n    }\n\n    // sort routes so that explicit routes have priority over dynamic routes\n    routes.sort((a, b) => {\n      const isDynamicA = a.pattern.includes(':')\n      const isDynamicB = b.pattern.includes(':')\n      if (isDynamicA && !isDynamicB) {\n        return 1\n      } else if (!isDynamicA && isDynamicB) {\n        return -1\n      }\n      return 0\n    })\n\n    // copy over extras\n    await fs.copy(extrasDir, buildDir)\n\n    // create core\n    const coreCode = `\n      ${routes.map(route => `import * as ${route.id} from '${route.relBuildToPageFile}'`).join('\\n')}\n      export const routes = [\n        ${routes\n          .map(route => {\n            return `\n            {\n              module: ${route.id},\n              id: '${route.id}',\n              prettyFileBase: '${route.prettyFileBase}',\n              pattern: '${route.pattern}',\n              shimFile: '${route.shimFile}',\n              shimFileName: '${route.shimFileName}',\n              relBuildToPageFile: '${route.relBuildToPageFile}',\n              relShimToPageFile: '${route.relShimToPageFile}',\n              Page: ${route.id}.default,\n            },\n          `\n          })\n          .join('\\n')}\n      ]\n      export { Document } from '../document.js'\n      export { createRuntime } from './runtime.js'\n      export * as lib from 'firebolt'\n    `\n    await fs.outputFile(buildCoreFile, coreCode)\n\n    // temporarily build core for validation\n    await esbuild.build({\n      entryPoints: [buildCoreFile],\n      outfile: tmpCoreFile,\n      bundle: true,\n      treeShaking: true,\n      sourcemap: true,\n      minify: false,\n      platform: 'node',\n      // format: 'esm',\n      packages: 'external',\n      // external: ['react', 'react-dom', '@emotion/react', ...config.external],\n      // external: [...config.external],\n      logLevel: 'silent',\n      alias: {\n        firebolt: buildLibFile,\n      },\n      define: {\n        'process.env.NODE_ENV': JSON.stringify(env),\n        FIREBOLT_NODE_ENV: JSON.stringify(env),\n      },\n      loader: {\n        '.js': 'jsx',\n      },\n      jsx: 'automatic',\n      jsxImportSource: '@emotion/react',\n      plugins: [],\n    })\n\n    // import and validate core page exports etc\n    const core = await reimport(tmpCoreFile)\n    for (const route of core.routes) {\n      if (!route.Page) {\n        throw new BundlerError(\n          `missing default export for ${$mark(route.prettyFileBase)}`\n        )\n      }\n    }\n\n    // generate page shims for client (tree shaking)\n    for (const route of routes) {\n      const code = `\n        import Page from '${route.relShimToPageFile}'\n        globalThis.$firebolt.push('registerPage', '${route.id}', Page)\n      `\n      await fs.outputFile(route.shimFile, code)\n    }\n\n    const registry = {} // [id]: { file, fnName }\n\n    // build client bundles (pages + chunks + bootstrap)\n    const publicDir = path.join(buildDir, 'public')\n    const publicFiles = []\n    for (const route of routes) {\n      publicFiles.push(route.shimFile)\n    }\n    publicFiles.push(buildBoostrapFile)\n    const bundleResult = await esbuild.build({\n      entryPoints: publicFiles,\n      entryNames: '/[name]-[hash]',\n      outdir: publicDir,\n      bundle: true,\n      treeShaking: true,\n      sourcemap: prod ? config.productionBrowserSourceMaps : true,\n      splitting: true,\n      platform: 'browser',\n      // mainFields: [\"browser\", \"module\", \"main\"],\n      // external: ['fs', 'path', 'util', /*...config.external*/],\n      format: 'esm',\n      minify: prod,\n      metafile: true,\n      logLevel: 'silent',\n      alias: {\n        firebolt: buildLibFile,\n      },\n      define: {\n        'process.env.NODE_ENV': JSON.stringify(env),\n        FIREBOLT_NODE_ENV: JSON.stringify(env),\n      },\n      loader: {\n        '.js': 'jsx',\n      },\n      jsx: 'automatic',\n      jsxImportSource: '@emotion/react',\n      keepNames: !prod,\n      plugins: [\n        registryPlugin({ registry }),\n        // polyfill fs, path etc for browser environment\n        // polyfillNode({}),\n        // ensure pages are marked side-effect free for tree shaking\n        // {\n        //   name: 'no-side-effects',\n        //   setup(build) {\n        //     build.onResolve({ filter: /.*/ }, async args => {\n        //       // ignore this if we called ourselves\n        //       if (args.pluginData) return\n        //       console.log(args.path)\n        //       const { path, ...rest } = args\n        //       // avoid infinite recursion\n        //       rest.pluginData = true\n        //       const result = await build.resolve(path, rest)\n        //       result.sideEffects = false\n        //       return result\n        //     })\n        //   },\n        // },\n      ],\n    })\n\n    // reconcile hashed build files with their source\n    const metafile = bundleResult.metafile\n    for (const file in metafile.outputs) {\n      const output = metafile.outputs[file]\n      if (output.entryPoint) {\n        // page wrappers\n        if (output.entryPoint.startsWith('.firebolt/page-shims/')) {\n          const shimFileName = output.entryPoint.replace('.firebolt/page-shims/', '') // prettier-ignore\n          const route = routes.find(route => {\n            return route.shimFileName === shimFileName\n          })\n          manifest.pageFiles[route.id] = file.replace(\n            '.firebolt/public',\n            '/_firebolt'\n          )\n        }\n        if (output.entryPoint === '.firebolt/bootstrap.js') {\n          manifest.bootstrapFile = file.replace('.firebolt/public', '/_firebolt') // prettier-ignore\n        }\n      }\n    }\n    await fs.outputFile(buildManifestFile, JSON.stringify(manifest, null, 2))\n\n    // generate our registry file\n    const getRegistryRelPath = file => path.relative(buildDir, file)\n    const registryCode = `\n      ${Object.keys(registry)\n        .map(\n          id =>\n            `export { ${registry[id].fnName} as ${id} } from '${getRegistryRelPath(registry[id].file)}'`\n        )\n        .join('\\n')}      \n    `\n    await fs.outputFile(buildRegistryFile, registryCode)\n\n    // build server entry\n    await esbuild.build({\n      entryPoints: [buildServerFile],\n      outfile: serverServerFile,\n      bundle: true,\n      treeShaking: true,\n      sourcemap: true,\n      minify: prod,\n      platform: 'node',\n      // format: 'esm',\n      packages: 'external',\n      logLevel: 'silent',\n      alias: {\n        firebolt: buildLibFile,\n      },\n      define: {\n        'process.env.NODE_ENV': JSON.stringify(env),\n        FIREBOLT_NODE_ENV: JSON.stringify(env),\n      },\n      loader: {\n        '.js': 'jsx',\n      },\n      jsx: 'automatic',\n      jsxImportSource: '@emotion/react',\n      keepNames: !prod,\n      plugins: [\n        registryPlugin({ registry: null }), // dont write to registry, we already have it from the client\n      ],\n    })\n\n    const elapsed = (performance.now() - startAt).toFixed(0)\n    log.info(`${firstBuild ? 'built' : 'rebuilt'} ${s.dim(`(${elapsed}ms)`)}\\n`) // prettier-ignore\n    firstBuild = false\n  }\n\n  let server\n  let controller\n\n  async function serve() {\n    let SILENT_STARTUP\n    if (server) {\n      SILENT_STARTUP = config && config.port === server.port ? 'yes' : undefined\n    }\n    // destroy previous server if any\n    if (server) {\n      await new Promise(resolve => {\n        server.once('exit', resolve)\n        controller.abort()\n      })\n      controller = null\n      server = null\n    }\n    // spawn server\n    controller = new AbortController()\n    server = fork(serverServerFile, {\n      signal: controller.signal,\n      env: { SILENT_STARTUP },\n    })\n    server.port = config?.port\n    server.on('error', err => {\n      // ignore abort signals\n      if (err.code === 'ABORT_ERR') return\n      // log other errors\n      console.log('server error')\n      console.error(err)\n    })\n    await new Promise(resolve => {\n      server.once('message', msg => {\n        if (msg === 'ready') resolve()\n      })\n    })\n    server.on('message', msg => {\n      if (msg.type === 'error') {\n        logCodeError(parseServerError(msg.error, appDir))\n      }\n    })\n  }\n\n  let runInProgress = false\n  let runPending = false\n\n  // handle bundler runs/re-runs safely\n  const run = async () => {\n    // if run is called while another run is in progress we\n    // queue it up to re-run again after\n    if (runInProgress) {\n      runPending = true\n      return\n    }\n    runInProgress = true\n    // build\n    if (opts.build) {\n      try {\n        await build()\n      } catch (err) {\n        if (err instanceof BundlerError) {\n          log.error(err.message)\n        } else if (isEsbuildError(err)) {\n          logCodeError(parseEsbuildError(err))\n        } else {\n          log.error('\\n')\n          console.error(err)\n        }\n        runInProgress = false\n        runPending = false\n        return\n      }\n    }\n    // only serve if there isn't anothe run pending\n    if (opts.serve && !runPending) {\n      await serve()\n    }\n    runInProgress = false\n    // if another run was queued, lets run it again!\n    if (runPending) {\n      runPending = false\n      run()\n    }\n  }\n\n  // execute our initial run\n  await run()\n\n  // watch for file changes and then re-run the bundler\n  if (opts.watch) {\n    const watchOptions = {\n      ignoreInitial: true,\n      ignored: ['**/.firebolt/**'],\n    }\n    const watcher = chokidar.watch([appDir], watchOptions)\n    const onChange = async (type, file) => {\n      log.change(`~/${path.relative(appDir, file)}`)\n      run()\n    }\n    watcher.on('all', debounce(onChange))\n  }\n\n  // todo: isolated builds don't exit the process automatically so\n  // for now we just force exit.\n  if (!opts.serve && !opts.watch) {\n    process.exit()\n  }\n}\n", "// utility to re-import a module\nexport function reimport(module) {\n  delete require.cache[module]\n  return import(`${module}?v=${Date.now()}`)\n}\n", "import fs from 'fs-extra'\nimport path from 'path'\n\nexport async function getFilePaths(baseDir) {\n  let filePaths = []\n\n  async function traverse(dir) {\n    const files = await fs.readdir(dir)\n    for (const file of files) {\n      const filePath = path.join(dir, file)\n      const stat = await fs.stat(filePath)\n\n      if (stat.isFile()) {\n        filePaths.push(filePath)\n      }\n      if (stat.isDirectory()) {\n        await traverse(filePath)\n      }\n    }\n  }\n\n  await traverse(baseDir)\n  return filePaths\n}\n", "// see: https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes\n// see: https://github.com/molefrog/wouter/blob/main/matcher.js\n// see: https://www.npmjs.com/package/path-to-regexp\n\nexport function fileToRoutePattern(filePath) {\n  // remove extension\n  filePath = filePath.split('.')\n  filePath.pop()\n  filePath = filePath.join('')\n  // split by _ and trim empties\n  filePath = filePath.split('_').filter(seg => !!seg)\n  // conversion\n  const pattern = filePath\n    .map(segment => {\n      // /index -> /\n      if (segment === '/index') {\n        return ''\n      }\n      // dynamic\n      if (segment.startsWith('$')) {\n        segment = segment.slice(1)\n        segment = ':' + segment\n      }\n      // one or more\n      if (segment.endsWith('+')) {\n        // ...\n      }\n      // zero or more\n      if (segment.endsWith('-')) {\n        segment = segment.slice(0, -1)\n        segment = segment + '*'\n      }\n      return segment\n    })\n    .join('/')\n  return pattern\n}\n", "import fs from 'fs-extra'\nimport { padStart } from 'lodash'\nimport path from 'path'\n\nimport * as s from './style'\nimport * as log from './log'\n\n/**\n * TODO: if esbuild throws multiple errors (eg the knex external issue) we currently only\n *       show the first but should probably show all of them!\n */\n\nexport class BundlerError extends Error {\n  constructor(message) {\n    super(message)\n    this.name = this.constructor.name\n    Error.captureStackTrace(this, this.constructor)\n  }\n}\n\nfunction getFileLine(file, line) {\n  const data = fs.readFileSync(file, 'utf-8')\n  return data.split('\\n')[line - 1]\n}\n\nfunction split(str, column, length) {\n  const first = str.substring(0, column)\n  const second = str.substring(column, column + length)\n  const third = str.substring(column + length)\n  return [first, second, third]\n}\n\nexport function parseEsbuildError(error) {\n  error = error.errors[0]\n  const name = 'BuildError'\n  const message = error.text\n  const file = error.location.file\n  const code = error.location.lineText\n  const line = error.location.line\n  const column = error.location.column\n  const length = error.location.length\n  const suggestion = error.location.suggestion\n  return {\n    name,\n    message,\n    file,\n    code,\n    line,\n    column,\n    length,\n    suggestion,\n  }\n}\n\nexport function parseServerError(error, appDir) {\n  const name = error.name // eg Error, ReferenceError\n  const message = error.message // eg foo is not defined\n  const lines = error.stack.split('\\n')\n  let [, file, line, column] = match = lines[1].match(/\\((.*):(\\d+):(\\d+)\\)$/) // prettier-ignore\n  const code = getFileLine(file, line)\n  return {\n    name,\n    message,\n    file: path.relative(appDir, file),\n    code,\n    line: parseInt(line),\n    column: parseInt(column) - 1,\n    length: 0,\n    suggestion: null,\n  }\n}\n\nexport function logCodeError({\n  name,\n  message,\n  file,\n  code,\n  line,\n  column,\n  length,\n  suggestion,\n}) {\n  let line1 = `${name}: ${message}\\n`\n  log.error(line1)\n\n  let line2 = `    ${file}:${line}:${column}:`\n  console.log(line2)\n\n  if (length) {\n    let line3 = `${padStart(line, 6)} | `\n    const parts = split(code, column, length)\n    parts[1] = s.mark(parts[1])\n    line3 += parts.join('')\n    console.log(line3)\n  } else {\n    let line3 = `${padStart(line, 6)} | `\n    line3 += code\n    console.log(line3)\n  }\n\n  if (length) {\n    let line4 = `       | ${padStart('', column)}${s.mark(padStart('', length, '~'))}`\n    console.log(line4)\n  } else {\n    let line4 = `       | ${padStart('', column)}${s.mark('^')}`\n    console.log(line4)\n  }\n\n  if (suggestion) {\n    let line5 = `       | ${padStart('', column)}${s.mark(suggestion)}`\n    console.log(line5)\n  }\n\n  console.log('')\n}\n\nexport function isEsbuildError(err) {\n  return err.errors?.[0].location\n}\n", "import fs from 'fs-extra'\nimport path from 'path'\nimport crypto from 'crypto'\n\nexport function registryPlugin({ registry }) {\n  return {\n    name: 'registryPlugin',\n    setup(build) {\n      build.onLoad({ filter: /\\.js$/ }, async args => {\n        const modPath = args.path\n\n        // skip node_modules\n        if (modPath.includes('node_modules')) {\n          return\n        }\n\n        // skip .firebolt build folder\n        if (modPath.includes('.firebolt')) {\n          return\n        }\n\n        // console.log('---')\n        // console.log(modPath)\n\n        // read file contents\n        let contents = await fs.readFile(modPath, 'utf8')\n\n        let matches\n        const imports = {}\n\n        // get all named imports\n        const namedImportRegex = /import\\s+{([^}]+)}\\s+from\\s+(['\"][^'\"]+['\"])/g\n        while ((matches = namedImportRegex.exec(contents)) !== null) {\n          const file = matches[2].slice(1).slice(0, -1)\n          const bits = matches[1].split(',')\n          bits.forEach(bit => {\n            const [name, alias] = bit.trim().split(/\\s+as\\s+/)\n            const usedName = alias || name\n            imports[usedName.trim()] = {\n              name: name.trim(),\n              alias: alias?.trim() || null,\n              file,\n            }\n          })\n        }\n\n        // get all default imports\n        const defaultImportRegex = /import\\s+(\\w+)\\s+from\\s+(['\"][^'\"]+['\"])/g\n        while ((matches = defaultImportRegex.exec(contents)) !== null) {\n          const file = matches[2].slice(1).slice(0, -1)\n          const name = matches[1].trim()\n          imports[name] = {\n            name,\n            alias: null,\n            file,\n          }\n        }\n\n        // console.log('imports', imports)\n\n        // transform useData calls\n        contents = await transform({\n          modPath,\n          imports,\n          contents,\n          hook: 'useData',\n          registry,\n        })\n\n        // transform useAction calls\n        contents = await transform({\n          modPath,\n          imports,\n          contents,\n          hook: 'useAction',\n          registry,\n        })\n\n        // console.log('registry', registry)\n\n        return { contents, loader: 'jsx' }\n      })\n    },\n  }\n}\n\nasync function transform({ modPath, imports, contents, hook, registry }) {\n  // check if file uses any of these hook calls\n  const usesHook = contents.includes(`${hook}(`)\n  if (!usesHook) return contents\n\n  // extract all function names used in useData/useAction calls\n  const dataRegex = new RegExp(`${hook}\\\\s*\\\\(\\\\s*([^,)]+)`, 'g')\n  let dataMatches\n  const fnNames = []\n  while ((dataMatches = dataRegex.exec(contents)) !== null) {\n    fnNames.push(dataMatches[1].trim())\n  }\n\n  // console.log('fnNames', fnNames)\n\n  // generate info about each function\n  const fnInfo = []\n  for (const fnName of fnNames) {\n    if (imports[fnName]) {\n      const name = imports[fnName].name\n      const alias = imports[fnName].alias\n      const file = path.resolve(path.dirname(modPath), imports[fnName].file) // prettier-ignore\n      const fullPath = `${file}${alias || name}`\n      const id = 'f' + crypto.createHash('sha256').update(fullPath).digest('hex') // prettier-ignore\n      fnInfo.push({ name, alias, file, id })\n    } else {\n      const name = fnName\n      const alias = null\n      const file = modPath\n      const fullPath = `${file}${name}`\n      const id = 'f' + crypto.createHash('sha256').update(fullPath).digest('hex') // prettier-ignore\n      fnInfo.push({ name, alias, file, id })\n    }\n  }\n\n  // console.log('fnInfo', fnInfo)\n\n  // replace all the functions used in useData/useAction calls with their id string\n  for (const item of fnInfo) {\n    // regex pattern to find the exact function name\n    const fnName = item.alias || item.name\n    const oldFnRegexPattern = `${hook}\\\\s*\\\\(\\\\s*${fnName}\\\\s*([^,)]*)`\n    const oldFnRegex = new RegExp(oldFnRegexPattern, 'g')\n\n    // replace the old function name with its id string\n    contents = contents.replace(oldFnRegex, `${hook}('${item.id}'$1`)\n  }\n\n  // register id to its file and function name\n  if (registry) {\n    for (const item of fnInfo) {\n      registry[item.id] = { file: item.file, fnName: item.name }\n    }\n  }\n\n  return contents\n}\n\n// async function hash(string) {\n//   const strUint8 = new TextEncoder('utf-8').encode(string)\n//   const hashBuffer = await crypto.subtle.digest('SHA-256', strUint8)\n//   const hashArray = Array.from(new Uint8Array(hashBuffer))\n//   const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n//   return hashHex\n// }\n"],
  "mappings": "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",
  "names": ["chalk", "info", "change", "error", "path", "fs", "error", "info", "import_fs_extra", "import_path", "import_child_process", "import_lodash", "module", "import_fs_extra", "import_path", "fs", "path", "import_fs_extra", "import_path", "fs", "error", "path", "import_fs_extra", "import_path", "build", "fs", "path", "crypto", "path", "build", "info", "fs", "route", "error", "chokidar", "change"]
}
